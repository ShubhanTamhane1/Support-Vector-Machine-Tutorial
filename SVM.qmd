---
title: "Support Vector Machine Demo"
author: "Shubhan Tamhane"
toc: true
number-sections: true
highlight-style: pygments
format: 
  html: 
    code-fold: true
    html-math-method: katex
    embed-resources: true
    self-contained-math: true	
  pdf: 
    geometry: 
      - top=30mm
      - left=20mm
##  docx: Never, unless to accommodate a collaborator
---
Importing necessary libraries
```{python}
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import classification_report, accuracy_score, precision_score, confusion_matrix, f1_score
import matplotlib.pyplot as plt 
from sklearn import datasets 
```

Importing libraries for accessing MNIST data
```{python}
import ssl
import certifi

ssl._create_default_https_context = lambda: ssl.create_default_context(cafile=certifi.where())

```

```{python}
from sklearn.datasets import fetch_openml
mnist = fetch_openml('mnist_784', version=1, as_frame=False)
```


Predicting whether a number is a 4 or a 9. 
Set test size to 20%. 
```{python}
X, y = mnist['data'], mnist['target'].astype(int)

mask = np.isin(y, [4,9])
X, y = X[mask], y[mask]

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=3255, test_size=0.2)
```

Fit Support Vector Classifier model on data, using a Radius Basis Function Kernel, gamma set to scale, and C set to 1. 
```{python}
m1 = SVC(kernel = 'rbf', gamma='scale', C =1)
m1.fit(X_test, y_test)
y_pred = m1.predict(X_test)
```


Model evaluation. 
```{python}
print("Accuracy Score:", accuracy_score(y_test, y_pred))
print("Precision Score:", precision_score(y_test, y_pred, pos_label=9))
print("F1 Score:", f1_score(y_test, y_pred, pos_label=9))
print("Confusion Matrix:", confusion_matrix(y_test, y_pred))
```

